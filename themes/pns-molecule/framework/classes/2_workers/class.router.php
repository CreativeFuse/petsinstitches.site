<?php

/**
 * The class for determining which views to load, and then
 * handling the rendering of those views.
 *
 *
 * @link       http://creativefuse.org/
 * @since      1.0.0
 *
 * @package    Molecule
 * @subpackage Molecule/workers
 * @author     CreativeFuse <support@creativefuse.org>
 */

class Molecule_Router{

	// Do nothing when class is instantiated
	public function __construct() {

	}

	/**
	 * Check if a view exists and then load that view.
	 *
	 * @uses  locate_tempalate
	 * @param		$view		The folder to look for the view in
	 * @param		$base		The first part of the view file name
	 * @param		$extension	The trailing part of the view file name
	 * @param		$output		Makes the current output variable available to the view to be loaded
	 *
	 * @access	public
	 *
	 * @since  1.0.0
	 */

	public static function render( $view, $base, $extension, $output = '' ){

		// Set Template base path
		$view_path = molecule()->get_setting( 'view_partial_path' );

		// Build the template location path
		$template = $view_path . $view . '/' . $base . '-' . $extension . '.php';

		// Check if the request template exists
		if( locate_template( $template ) != '' ){


				/**
				 * If the template exists we use include( load_template )
				 * and grab our view. Using this method allows the loaded view
				 * to use variables from the file, function, or method it was called from.
				 *
				 * @param string $template the teplate path location built from the received method parameters
				 *
				 * @param bool $load echo out the template?

				 * - The $load parameter default to false because we are wrapping it in an include().
				 *   If we do not set it to false, the view will output twice
				 *
				 * @since  1.0.0
				 */

				include( locate_template( $template, false, false ) );


			// Returns the output variable from the template file if needed

			return $output;


		} else {

			// If the requested template isn't found, let's let admins know

			if( current_user_can('administrator') ){

				echo wp_kses_post( 'The following partial was requested, but not found: <strong>' . $template . '</strong>');

			}

		}

	}


	/**
	 * Check if a view exists and then load that view.
	 *
	 * @uses		locate_tempalate
	 * @param		$view		The folder to look for the view in
	 * @param		$base		The first part of the view file name
	 * @param		$extension	The trailing part of the view file name
	 *
	 * @access	public
	 *
	 * @since  1.0.0
	 */

	public static function render_template( $view, $extension ){

		// Set Template base path
		$view_path = molecule()->get_setting( 'view_template_path' );

		// Build the template location path
		$template = $view_path . $view . '/' . $view . '-' . $extension . '.php';

		// Check if the request template exists
		if( locate_template( $template ) != '' ){


			/**
			 * If the template exists we use include( load_template )
			 * and grab our view. Using this method allows the loaded view
			 * to use variables from the file, function, or method it was called from.
			 *
			 * @param string $template the teplate path location built from the received method parameters
			 *
			 * @param bool $load echo out the template?

			 * - The $load parameter default to false because we are wrapping it in an include().
			 *   If we do not set it to false, the view will output twice
			 *
			 * @since  1.0.0
			 */

			include( locate_template( $template, $load = false ) );

		} else {

			// If the requested template isn't found, let's let admins know


			if( current_user_can('administrator') ){

				$post_type = Molecule_Display::post_type_name( false );
				$term = Molecule_Display::term_name( false );

				if( ! $term ){
					$term = ( 'not applicable' );
				}

				echo wp_kses_post(

					'<div style="max-width:800px; margin:50px auto;background-color:#303030;padding:25px;">
						<p class="e-p--larger" style="color:#FFFFFF">Content was requested that exists, but the template needed to load the content was not found.</h4>
						<p class="e-p--larger" style="color:#FFFFFF"><strong>The following info was generated by our custom theme methods:</strong></p><br/>
						<p class="e-p--common" style="color:#E6E6E6"><strong>Requested Post Type Partial:</strong> '. $post_type .'</p>
						<p class="e-p--common" style="color:#E6E6E6"><strong>Requested Term Partial:</strong> '. $term .'</p>
						<p class="e-p--common" style="color:#E6E6E6"><strong>Final Requested Template:</strong> <em>' . $template . '</p></em><BR/>
						<p class="e-p--small" style="color:#FFFFFF">If the data above is incomplete, or incorrect, the methods to display the template may need to be modified.</p>
					</div>'
					);

			}

		}

	}


	/**
	 * Output either the URL or ALT of a post's featured image or an ACF image
	 *
	 * @param  string $source   The source of the iamge ( accepts 'post', 'acf', 'acf_sub', or 'acf_options')
	 * @param  string $type     The type of data we are requesting ( accepts 'url' or 'alt' )
	 * @param  string $id       ID of the Image ( blank for post, or enter the acf field id )
	 * @param  string $size     Size of the image to be requested ( default = full )
	 *
	 * @return string           Either the URL or alt of the image, both appropriately sanatized.
	 * @access	public
	 *
	 * @since 1.0.0
	 */

	public static function get_img_meta( $source, $type, $id = '' , $term = null, $size = 'full'){

		// declare $post global if used outside of the loop
		global $post;



		//Set a blank Value to preven errors
		$value = '';

		// If we are getting an image from ACF and if the field we need
		// actually has data.

		if( $source == 'acf' && get_field( $id, $term ) ){

			//If we are getting the URL of an ACF Image
			if( $type == 'url'){

				$value = get_field( $id, $term );
				$value = esc_url( $value['url'] );

			}

			// If we are getting the alt attribute of an ACF Image
			if( $type == 'alt' ){

				$value = get_field( $id, $term );
				$value = esc_html( $value['alt'] );

			}

		}


		if( $source == 'acf_sub' && get_sub_field( $id ) ){

			//If we are getting the URL of an ACF Image
			if( $type == 'url'){

				$value = get_sub_field( $id );
				$value = esc_url( $value['url'] );

			}

			// If we are getting the alt attribute of an ACF Image
			if( $type == 'alt' ){

				$value = get_sub_field( $id );
				$value = esc_html( $value['alt'] );

			}


		}


		if( $source == 'acf_options' && get_field( $id, 'options' ) ){

			//If we are getting the URL of an ACF Image
			if( $type == 'url'){

				$value = get_field( $id, 'options');
				$value = esc_url( $value['url'] );

			}

			// If we are getting the alt attribute of an ACF Image
			if( $type == 'alt' ){

				$value = get_field( $id, 'options' );
				$value = esc_html( $value['alt'] );

			}


		}

		// If we are getting the Featured Image from a WP Post

		if( $source == 'post' ){

			// check to see if the theme supports Featured Images, and one is set
			if (current_theme_supports( 'post-thumbnails' ) && has_post_thumbnail( $post->ID )) {


				// Get the image ID
				$img_id = get_post_thumbnail_id( $post->ID );

				// If we are getting the URL
				if( $type == 'url' ){

					$featured_image = wp_get_attachment_image_src( $img_id , $size );

					// this returns just the URL of the image
					$value = $featured_image[0];
					$value = esc_url( $value );

				}

				// If we are getting the Alt Tag
				if( $type == 'alt' ){

					$value = get_post_meta( $img_id, '_wp_attachment_image_alt', true);
					$value = esc_html( $value );
				}

			}

		}

		echo $value;

		}


	/**
	 * Load the correct page template from framework/views/templates
	 *
	 * @uses	Molecule_Display::page_title()
	 * @uses	Molecule_Display::post_type_name()
	 *
	 * @since  1.0.0
	 * @return the page template to be loaded
	 */

	public static function load_template(){


		if ( is_page() ){

			// We need the global Post ID to do some
			// of our parent id checking

			global $post;


			/**
			 * Build arrays of parent pages we need to create
			 * custom routing for. The parent ID needs to be
			 * checked on the live and dev sites.
			 */

				// Build an array for our Post Op Parent Page ID

				$post_op_parent_id = array(

					'152' 	=> 'dev',
					'274' 	=> 'live'
				);


			// If the current page is a child of the post-op parent page
			// load our post-op page template

			if ( array_key_exists( $post->post_parent, $post_op_parent_id ) ){

				$folder = 'page';
				$extension = 'post-op';


			} else {


				// Set Defaults for page handling
				$folder = 'page';
				$extension = Molecule_Display::page_title( false );

			}




		} elseif( is_tax() ){


			$folder = 'taxonomy';
			$extension = Molecule_Display::post_type_name( false );
			$extension .= '-';
			$extension .= Molecule_Display::term_name( false );


		} elseif( is_category() ){

				$folder = 'archive';
				$extension = 'posts';


		} elseif( is_archive() ){

			// If we are on the standard Post Archive
			// Load our Post Template
			if ( is_post_type_archive( 'posts' ) ){

				$folder = 'archive';
				$extension = 'posts';


			} else {

				$folder = 'archive';
				$extension = Molecule_Display::post_type_name( false );

			}


		} elseif( is_single() ){

			$folder = 'single';
			$extension = Molecule_Display::post_type_name( false );

		} elseif( is_home() ){

			$folder = 'archive';
			$extension = 'posts';

		}


		Molecule_Router::render_template( $folder, $extension );


	}


	/**
	 * The method that is responsible for loading hero sections ( headers ) accross the site.
	 * It runs through various conditional to see what page or post we are on, and then loads
	 * the defined hero file.
	 *
	 * To add and load a new hero, simply define the desired post type conditionals and create
	 * the appropriate hero file in FRAMEWORk/VIEWS/HERO/_hero-( 'your hero name' )
	 *
	 * @uses Molecule_Router::render to render the appropriate hero file
	 * @access	public
	 *
	 * @since 1.0
	 */

	public static function load_hero(){

		/**
		 * If we hit a 404 error
		 */
		if( is_404() ){

			// Don't Load Hero on 404


		/**
		 * If we are on a page
		 */
		}elseif( is_page() ){

			//If we are on the home page
			if ( is_front_page() ){

				// Molecule_Router::render( 'object/hero', '_hero', 'home' );


			// If we are on any other page other than a landing page
			} elseif( ! is_page_template( 'templates/landing.php' ) ) {

				Molecule_Router::render( 'object/hero', '_hero', 'page' );

			}



		/**
		 * If we are on an archive page
		 */
		} elseif ( is_archive() ){


			if( is_post_type_archive( 'testimonials' ) ) {


				Molecule_Router::render( 'object/hero', '_hero', 'testimonials-archive' );

			//
			// Archive Services
			//

			} elseif ( is_post_type_archive( 'service' ) ){


				Molecule_Router::render( 'object/hero', '_hero', 'services-archive' );


			} elseif ( is_post_type_archive( 'partners' ) ){

				Molecule_Router::render( 'object/hero', '_hero', 'partners-archive' );


			} elseif ( is_post_type_archive( 'faqs' ) ){


				Molecule_Router::render( 'object/hero', '_hero', 'faq-archive' );


			} else {}




		/**
		 * If we are on a single post page
		 */
		} elseif( is_single() ){


			//
			// Single Post
			//

			if( is_singular( 'post' ) ) {


			} else {}




		} elseif( is_home() ) {


			Molecule_Router::render( 'object/hero', '_hero', 'blog-archive' );


		} else {}


	}//end method


	/**
	 * Similar to the load_hero method, this is the method that is responsible for conditionally
	 * loading Call to Actions on the site.
	 *
	 * To add and load a new CTA, simply define the desired post type conditionals and create
	 * the appropriate CTA file in FRAMEWORk/VIEWS/CTA/_cta-( 'your cta name' )
	 *
	 * @uses Molecule_Router::render to render the appropriate hero file
	 * @access	public
	 *
	 * @since 1.0
	 */

	public static function load_cta(){

		// In Progress

	}

}